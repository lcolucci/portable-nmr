function [result, fitresult] = t2_fitting_1exp(x, y,StartingPoints)
%  3-exp fitting: All Relaxation Times fixed at 40ms, 100ms, and 200ms. All amps are allowed to free float. 
%
%  Output:
%      fitresult : a cell-array of fit objects representing the fits.
%      gof : structure array with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 22-Jan-2018 22:20:22

%% Initialization
[xData, yData] = prepareCurveData( x(:), y(:));

% Set up fittype and options.
model = fittype( 'a*exp(-x/r)', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.Lower = [0 0 ]; 
opts.Upper = [10000 Inf]; 
if (~exist('StartingPoints','var') || isempty(StartingPoints)) 
      StartingPoints=[10 50]; % If no starting values entered, use default input
end 
set(opts,'StartPoint',StartingPoints,'Lower',[0,0], 'Upper', [10000,10000]);
Confidence = 0.95;

%% Fitting
% Fit model to data.
[fitresult, gof, out] = fit( xData, yData, model, opts);

% Calculate error in the parameters given a confidence interval
ci = confint(fitresult,Confidence); % Columns = variable
                                    % 1st Row = lower CI bound
                                    % 2nd Row = upper CI bound

%% Format                                    
% Format Fit Results in Table
result = table(); 
result.relax1 = fitresult.r; 
result.relax1Std = ci(2,2) - fitresult.r; 
result.amp1 = fitresult.a;  
result.amp1std = ci(2,1) - fitresult.a; 
result.r2 = gof.rsquare; 
% result.r2adj = gof.adjrsquare; 
result.sse = gof.sse;
result.rmse = gof.rmse; 
% result.dfe = gof.dfe; 
result.maxVal = max(y); 
if length(y) > 32 % Figures out if it's a leg sensor dataset (4000+ pts) or MRI data (only 32pts)
    percentIndex = round(.35.*length(y)); 
    result.snr = max(y) / std(y(end-percentIndex:end)); 
else
    result.snr = NaN; 
end
result.exitflag = out.exitflag; 
result.startValAmp1 = opts.StartPoint(1); 
result.startValRelax1 = opts.StartPoint(2); 


