function dataHD = importRedcapHD(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   MRIHDSTUDYDATALABELS201807091333 = IMPORTFILE(FILENAME) Reads data from
%   text file FILENAME for the default selection.
%
%   MRIHDSTUDYDATALABELS201807091333 = IMPORTFILE(FILENAME, STARTROW,
%   ENDROW) Reads data from rows STARTROW through ENDROW of text file
%   FILENAME.
%
% Example:
%   MRIHDStudyDATALABELS201807091333 = importfile('MRIHDStudy_DATA_LABELS_2018-07-09_1333.csv', 2, 9);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/07/09 13:38:58

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[60,62,63,67,68,69,82,87,92,94,96,97,134,135,136,137,138,139,141,144,145,146,148,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[4,61,81,204]% Convert the contents of columns with dates to MATLAB datetimes using the specified date format.
    try
        dates{col} = datetime(dataArray{col}, 'Format', 'yyyy-MM-dd', 'InputFormat', 'yyyy-MM-dd'); %#ok<AGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', 'yyyy-MM-dd', 'InputFormat', 'yyyy-MM-dd'); %#ok<AGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<AGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = dataArray{col} == '';
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[4,61,81,204]);
blankDates = blankDates(:,[4,61,81,204]);
invalidDates = invalidDates(:,[4,61,81,204]);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [60,62,63,67,68,69,82,87,92,94,96,97,134,135,136,137,138,139,141,144,145,146,148,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179]);
rawStringColumns = string(raw(:, [1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,64,65,66,70,71,72,73,74,75,76,77,78,79,80,83,84,85,86,88,89,90,91,93,95,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,140,142,143,147,149,150,151,167,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,206,207]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,76,77,78,79,80,81,88,89,91,93,94,95,96,97,98,99,100,101,102,103,104,106,108,109,111,113,114,115,116,118,120,123,125,126,128,129,150,151,153]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
dataHD = table;
dataHD.RecordID = categorical(rawStringColumns(:, 1));
dataHD.Complete = categorical(rawStringColumns(:, 2));
dataHD.Consentobtainedby = categorical(rawStringColumns(:, 3));
dataHD.Dateofconsent = dates{:, 1};
dataHD.MethodofobtainingconsentchoiceFamily = categorical(rawStringColumns(:, 4));
dataHD.MethodofobtainingconsentchoiceStafffluentinsubjectsnativelangua = categorical(rawStringColumns(:, 5));
dataHD.MethodofobtainingconsentchoiceHospitalinterpreter = categorical(rawStringColumns(:, 6));
dataHD.MethodofobtainingconsentchoicePhone = categorical(rawStringColumns(:, 7));
dataHD.MethodofobtainingconsentchoiceShortformconsent = categorical(rawStringColumns(:, 8));
dataHD.CheckallthatapplychoiceThesubjectmeetseligibilityrequirements = categorical(rawStringColumns(:, 9));
dataHD.CheckallthatapplychoiceVerbalconsentwasobtained = categorical(rawStringColumns(:, 10));
dataHD.CheckallthatapplychoiceSurrogateconsentwasobtained = categorical(rawStringColumns(:, 11));
dataHD.CheckallthatapplychoiceAllofsubjectsquestionswereansweredconcer = categorical(rawStringColumns(:, 12));
dataHD.CheckallthatapplychoiceSubjectdidnothaveanyquestionsconcerns = categorical(rawStringColumns(:, 13));
dataHD.CheckallthatapplychoiceSubjectwasgiventimetoreviewtheconsentfor = categorical(rawStringColumns(:, 14));
dataHD.CheckallthatapplychoiceSubjecthasagreedtoparticipateandhassigne = categorical(rawStringColumns(:, 15));
dataHD.CheckallthatapplychoiceTheconsentprocesswaswitnessedbya3rdparty = categorical(rawStringColumns(:, 16));
dataHD.CheckallthatapplychoiceAcopyoftheconsentformwasgiventothesubjec = categorical(rawStringColumns(:, 17));
dataHD.CheckallthatapplychoiceAcopyofthesigneddatedconsentformwasplace = categorical(rawStringColumns(:, 18));
dataHD.CheckallthatapplychoiceAcopyofthesigneddatedformwasplacedinther = categorical(rawStringColumns(:, 19));
dataHD.LanguageConsentedIn = categorical(rawStringColumns(:, 20));
dataHD.OtherLanguageofConsent = rawStringColumns(:, 21);
dataHD.Witnesstoconsent = rawStringColumns(:, 22);
dataHD.DoyouconsenttoundergoingscanswiththeverylowfieldMRIscanner = categorical(rawStringColumns(:, 23));
dataHD.Doyouagreetoletusstoreyoursamplesandhealthinformationforfuturer = categorical(rawStringColumns(:, 24));
dataHD.Doyouagreetoletuscontactyouforfutureresearchstudiesrelatedtochr = categorical(rawStringColumns(:, 25));
dataHD.Complete1 = categorical(rawStringColumns(:, 26));
dataHD.Isthesubjectlessthan25yearsofage = categorical(rawStringColumns(:, 27));
dataHD.IsthesubjectsBMIbetween18540 = categorical(rawStringColumns(:, 28));
dataHD.Isthesubjectinitiatingdialysis = categorical(rawStringColumns(:, 29));
dataHD.DoesthesubjecthaveseveranemiaHgb75mgdL = categorical(rawStringColumns(:, 30));
dataHD.Doesthesubjecthaveapacemaker = categorical(rawStringColumns(:, 31));
dataHD.Doesthesubjecthavemetalimplants = categorical(rawStringColumns(:, 32));
dataHD.Doesthesubjecthaveahistoryoflimbamputationscontralateraltotheir = categorical(rawStringColumns(:, 33));
dataHD.Isthesubjectpregnantorbreastfeeding = categorical(rawStringColumns(:, 34));
dataHD.Notes = rawStringColumns(:, 35);
dataHD.Complete2 = categorical(rawStringColumns(:, 36));
dataHD.Doyouhaveaheartpacemaker = categorical(rawStringColumns(:, 37));
dataHD.DoyouhaveadeviceimplantedinyourbodysuchasadefibrillatoraTENSuni = categorical(rawStringColumns(:, 38));
dataHD.Haveyoueverhadmetalclipsinyourbrainorelsewhereinyourbodyfromapr = categorical(rawStringColumns(:, 39));
dataHD.Areyoupregnantoristhereachanceyoumaybepregnant = categorical(rawStringColumns(:, 40));
dataHD.Areyoubreastfeedingatthemoment = categorical(rawStringColumns(:, 41));
dataHD.Isthereanychanceofmetalpiecesinyoureyes = categorical(rawStringColumns(:, 42));
dataHD.Doyouhaveanymetalinyourbodylikeshrapnelbulletsorimplants = categorical(rawStringColumns(:, 43));
dataHD.Areyouclaustrophobic = categorical(rawStringColumns(:, 44));
dataHD.Haveyoueverhadsurgery = categorical(rawStringColumns(:, 45));
dataHD.Whatkindofsurgerysurgerieshaveyouhad = rawStringColumns(:, 46);
dataHD.Haveyouhadanyjointreplacementsormetalimplantsinyourbones = categorical(rawStringColumns(:, 47));
dataHD.Doyouwearanypatchesonyourbodythatcontainmedicationssuchasnicoti = categorical(rawStringColumns(:, 48));
dataHD.DoyouhaveanIUD = categorical(rawStringColumns(:, 49));
dataHD.Haveyoueverbeenexposedtometalbeingweldeddrilledorcut = categorical(rawStringColumns(:, 50));
dataHD.Doyouhaveanytattoospermanenteyelinerwigorhairpiece = categorical(rawStringColumns(:, 51));
dataHD.Doyouhaveafalseeye = categorical(rawStringColumns(:, 52));
dataHD.Doyouhaveanyremovabledentalwork = categorical(rawStringColumns(:, 53));
dataHD.Doyouwearahearingaid = categorical(rawStringColumns(:, 54));
dataHD.Areyouabletolieflatforapproximately1hour = categorical(rawStringColumns(:, 55));
dataHD.Doyouwearglassesorcontactlenses = categorical(rawStringColumns(:, 56));
dataHD.Notes1 = rawStringColumns(:, 57);
dataHD.Complete3 = categorical(rawStringColumns(:, 58));
dataHD.SubjectID = cell2mat(rawNumericColumns(:, 1));
dataHD.DateofStudyHDTreatment = dates{:, 2};
dataHD.Studyvisitnumber = cell2mat(rawNumericColumns(:, 2));
dataHD.Age = cell2mat(rawNumericColumns(:, 3));
dataHD.Gender = categorical(rawStringColumns(:, 59));
dataHD.Race = categorical(rawStringColumns(:, 60));
dataHD.Ethnicity = categorical(rawStringColumns(:, 61));
dataHD.Heightincm = cell2mat(rawNumericColumns(:, 4));
dataHD.Baselinedryweightinkg = cell2mat(rawNumericColumns(:, 5));
dataHD.BMI = cell2mat(rawNumericColumns(:, 6));
dataHD.Doesthepatienthaveanyamputations = categorical(rawStringColumns(:, 62));
dataHD.LocationofamputationchoiceRighttoe = categorical(rawStringColumns(:, 63));
dataHD.LocationofamputationchoiceRightfoot = categorical(rawStringColumns(:, 64));
dataHD.LocationofamputationchoiceRightbelowtheknee = categorical(rawStringColumns(:, 65));
dataHD.LocationofamputationchoiceRightabovetheknee = categorical(rawStringColumns(:, 66));
dataHD.LocationofamputationchoiceLefttoe = categorical(rawStringColumns(:, 67));
dataHD.LocationofamputationchoiceLeftfoot = categorical(rawStringColumns(:, 68));
dataHD.LocationofamputationchoiceLeftbelowtheknee = categorical(rawStringColumns(:, 69));
dataHD.LocationofamputationchoiceLeftabovetheknee = categorical(rawStringColumns(:, 70));
dataHD.LocationofamputationchoiceOther = categorical(rawStringColumns(:, 71));
dataHD.Otheramputation = rawStringColumns(:, 72);
dataHD.DateofDialysisStart = dates{:, 3};
dataHD.Dialysisvintagedays = cell2mat(rawNumericColumns(:, 7));
dataHD.Accessregularlyused = categorical(rawStringColumns(:, 73));
dataHD.Accessothertype = rawStringColumns(:, 74);
dataHD.Locationofaccess = rawStringColumns(:, 75);
dataHD.Accessusedthistreatment = categorical(rawStringColumns(:, 76));
dataHD.HDruntime = cell2mat(rawNumericColumns(:, 8));
dataHD.Ispatientonoxygen = categorical(rawStringColumns(:, 77));
dataHD.Whichsideofthebodywasmeasured = categorical(rawStringColumns(:, 78));
dataHD.WherewasBPcuffrelativetoNMRmeasurement = categorical(rawStringColumns(:, 79));
dataHD.Werethere1ormoreIVsonthearmthatwasmeasured = categorical(rawStringColumns(:, 80));
dataHD.TypeofDialyzerFilter = cell2mat(rawNumericColumns(:, 9));
dataHD.TypeofTubing = categorical(rawStringColumns(:, 81));
dataHD.HDMachine = cell2mat(rawNumericColumns(:, 10));
dataHD.Locationoftherun = rawStringColumns(:, 82);
dataHD.PotassiumbathlevelK = cell2mat(rawNumericColumns(:, 11));
dataHD.CalciumbathlevelCa = cell2mat(rawNumericColumns(:, 12));
dataHD.Listeverythingthepersonhadtoeatdrinkexerciselevelsinthe12hoursb = rawStringColumns(:, 83);
dataHD.ListalltripstothebathroomthatthepersonhadbothatCRCandMartinos = rawStringColumns(:, 84);
dataHD.Notesabouttemperaturereadings = rawStringColumns(:, 85);
dataHD.Notesabouttimeiediscrepanciesbetweentheclockonlaptopthermometer = rawStringColumns(:, 86);
dataHD.Nursesprimaryandbackup = rawStringColumns(:, 87);
dataHD.Engineer = categorical(rawStringColumns(:, 88));
dataHD.ClinicalStudyStaff = categorical(rawStringColumns(:, 89));
dataHD.Otherpeoplethereduringtherun = rawStringColumns(:, 90);
dataHD.WhoistranscribingthisinfointoREDCap = categorical(rawStringColumns(:, 91));
dataHD.Comments = rawStringColumns(:, 92);
dataHD.Complete4 = categorical(rawStringColumns(:, 93));
dataHD.HTN = categorical(rawStringColumns(:, 94));
dataHD.DM = categorical(rawStringColumns(:, 95));
dataHD.CAD = categorical(rawStringColumns(:, 96));
dataHD.Hasthesubjecteverhadapacemakerorimplantablecardiacdevice = categorical(rawStringColumns(:, 97));
dataHD.CHF = categorical(rawStringColumns(:, 98));
dataHD.OnESA = categorical(rawStringColumns(:, 99));
dataHD.OnIViron = categorical(rawStringColumns(:, 100));
dataHD.OnActiveVitaminDorCinacalcet = categorical(rawStringColumns(:, 101));
dataHD.COPD = categorical(rawStringColumns(:, 102));
dataHD.Arrhythmia = categorical(rawStringColumns(:, 103));
dataHD.Connectivetissuedisease = categorical(rawStringColumns(:, 104));
dataHD.Typeofconnectivetissuedisease = rawStringColumns(:, 105);
dataHD.JointDisease = categorical(rawStringColumns(:, 106));
dataHD.Hasthesubjecteverhadajointreplacement = rawStringColumns(:, 107);
dataHD.Hyperlipidemia = categorical(rawStringColumns(:, 108));
dataHD.Liverdisease = categorical(rawStringColumns(:, 109));
dataHD.VarName125 = rawStringColumns(:, 110);
dataHD.Malignancy = categorical(rawStringColumns(:, 111));
dataHD.MalginancyType = rawStringColumns(:, 112);
dataHD.PeripheralVascularDisease = categorical(rawStringColumns(:, 113));
dataHD.Failedrenaltransplant = categorical(rawStringColumns(:, 114));
dataHD.Venousthromboembolicdisease = categorical(rawStringColumns(:, 115));
dataHD.Cerebralvascularevent = categorical(rawStringColumns(:, 116));
dataHD.Other = rawStringColumns(:, 117);
dataHD.Complete5 = categorical(rawStringColumns(:, 118));
dataHD.Fingerlengthcm = cell2mat(rawNumericColumns(:, 13));
dataHD.PREfingercircumferencecm = cell2mat(rawNumericColumns(:, 14));
dataHD.Calflengthcm = cell2mat(rawNumericColumns(:, 15));
dataHD.SpacingbtwCalfElectrodescm = cell2mat(rawNumericColumns(:, 16));
dataHD.PREmajorcalfcircumferencecm = cell2mat(rawNumericColumns(:, 17));
dataHD.PREminorCalfcircumferencecm = cell2mat(rawNumericColumns(:, 18));
dataHD.NotesaboutPREfingercalfmeasurements = rawStringColumns(:, 119);
dataHD.PreHDWeightTime0inkg = cell2mat(rawNumericColumns(:, 19));
dataHD.Wasthisastandingweightonthescale = categorical(rawStringColumns(:, 120));
dataHD.AnynotescommentsonthepreHDweight = rawStringColumns(:, 121);
dataHD.POSTHDFingerCircumferencecm = cell2mat(rawNumericColumns(:, 20));
dataHD.POSTHDMajorCalfCircumferencecm = cell2mat(rawNumericColumns(:, 21));
dataHD.POSTHDMinorCalfCircumferencecm = cell2mat(rawNumericColumns(:, 22));
dataHD.NotesaboutPOSTfingercalfmeasurements = rawStringColumns(:, 122);
dataHD.Post_HDWeightinkg = cell2mat(rawNumericColumns(:, 23));
dataHD.Wasthisastandingweightonthescale1 = categorical(rawStringColumns(:, 123));
dataHD.AnynotescommentsonthepostHDweight = rawStringColumns(:, 124);
dataHD.Complete6 = categorical(rawStringColumns(:, 125));
dataHD.Sodiumpre = cell2mat(rawNumericColumns(:, 24));
dataHD.BUNpre = cell2mat(rawNumericColumns(:, 25));
dataHD.Creatininepre = cell2mat(rawNumericColumns(:, 26));
dataHD.WBCpre = cell2mat(rawNumericColumns(:, 27));
dataHD.Hemoglobinpre = cell2mat(rawNumericColumns(:, 28));
dataHD.Hematocritpre = cell2mat(rawNumericColumns(:, 29));
dataHD.Plateletspre = cell2mat(rawNumericColumns(:, 30));
dataHD.Osmolalitypre = cell2mat(rawNumericColumns(:, 31));
dataHD.BNPpre = cell2mat(rawNumericColumns(:, 32));
dataHD.Albuminpre = cell2mat(rawNumericColumns(:, 33));
dataHD.Sodiumpost = cell2mat(rawNumericColumns(:, 34));
dataHD.BUNpost = cell2mat(rawNumericColumns(:, 35));
dataHD.Creatininepost = cell2mat(rawNumericColumns(:, 36));
dataHD.Osmolalitypost = cell2mat(rawNumericColumns(:, 37));
dataHD.BNPpost = cell2mat(rawNumericColumns(:, 38));
dataHD.Complete7 = categorical(rawStringColumns(:, 126));
dataHD.DTIQuestion1Thirstisaproblemforme = cell2mat(rawNumericColumns(:, 39));
dataHD.DTIQuestion2Imthirstyduringtheday = cell2mat(rawNumericColumns(:, 40));
dataHD.DTIQuestion3Imthirstyduringthenight = cell2mat(rawNumericColumns(:, 41));
dataHD.DTIQuestion4Mysociallifeisinfluencedbymythirst = cell2mat(rawNumericColumns(:, 42));
dataHD.DTIQuestion5Imthirstybeforedialyticsession = cell2mat(rawNumericColumns(:, 43));
dataHD.DTIQuestion6Imthirstyduringdialyticsession = cell2mat(rawNumericColumns(:, 44));
dataHD.DTIQuestion7Imthirstyafterdialyticsession = cell2mat(rawNumericColumns(:, 45));
dataHD.TDSQuestion1Mythirstcausesmediscomfort = cell2mat(rawNumericColumns(:, 46));
dataHD.TDSQuestion2Mythirstbothersmealot = cell2mat(rawNumericColumns(:, 47));
dataHD.TDSQuestion3IamveryuncomfortablewhenIamthirsty = cell2mat(rawNumericColumns(:, 48));
dataHD.TDSQuestions4MymouthfeelslikecottonwhenIamthirsty = cell2mat(rawNumericColumns(:, 49));
dataHD.TDSQuestion5WhenIdrinklessmythirstgetsworse = cell2mat(rawNumericColumns(:, 50));
dataHD.ThirstIntensity = rawStringColumns(:, 127);
dataHD.Complete8 = categorical(rawStringColumns(:, 128));
dataHD.Wereanyadverseeventsexperienced = categorical(rawStringColumns(:, 129));
dataHD.AEIdentifier = rawStringColumns(:, 130);
dataHD.Whatistheadverseeventterm = rawStringColumns(:, 131);
dataHD.Whatisthedatetheadverseeventstarted = rawStringColumns(:, 132);
dataHD.Atwhattimedidtheadverseeventstart = rawStringColumns(:, 133);
dataHD.Istheadverseeventstillongoing = rawStringColumns(:, 134);
dataHD.Whatdatedidtheadverseeventend = rawStringColumns(:, 135);
dataHD.Atwhattimedidtheadverseeventend = rawStringColumns(:, 136);
dataHD.Whatwastheseverityoftheadverseevent = rawStringColumns(:, 137);
dataHD.Whatisthetoxicitygradeoftheadverseevent = rawStringColumns(:, 138);
dataHD.Istheadverseeventserious = rawStringColumns(:, 139);
dataHD.DidtheadverseeventresultinPersistentorsignificantdisabilityorin = rawStringColumns(:, 140);
dataHD.Didtheadverseeventresultindeath = rawStringColumns(:, 141);
dataHD.Didtheadverseeventresultininitialorprolongedhospitalizationfort = rawStringColumns(:, 142);
dataHD.IstheadverseeventLifeThreatening = rawStringColumns(:, 143);
dataHD.Istheadverseeventamedicallyimportanteventnotcoveredbyotherserio = rawStringColumns(:, 144);
dataHD.Isthiseventrelatedtostudytreatment = rawStringColumns(:, 145);
dataHD.Whatactionwastakenwithstudytreatment = rawStringColumns(:, 146);
dataHD.Whatotheractionwastakeninresponsetothisadverseevent = rawStringColumns(:, 147);
dataHD.Whatwastheoutcomeofthisadverseevent = rawStringColumns(:, 148);
dataHD.Didtheadverseeventcausethesubjecttobediscontinuedfromthestudy = rawStringColumns(:, 149);
dataHD.Complete9 = categorical(rawStringColumns(:, 150));
dataHD.Dateoflaststudyvisit = dates{:, 4};
dataHD.Reasonoffstudy = categorical(rawStringColumns(:, 151));
dataHD.Offstudyother = rawStringColumns(:, 152);
dataHD.Complete10 = categorical(rawStringColumns(:, 153));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% dataHD.Dateofconsent=datenum(dataHD.Dateofconsent);dataHD.DateofStudyHDTreatment=datenum(dataHD.DateofStudyHDTreatment);dataHD.DateofDialysisStart=datenum(dataHD.DateofDialysisStart);dataHD.Dateoflaststudyvisit=datenum(dataHD.Dateoflaststudyvisit);

